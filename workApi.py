import requests


# @dataclass
# class Info:
#     names: str = "Unknown"
#     namesPhoneBooks: str = "Unknown"
#     namesDatabaseItems: str = "Unknown"
#     borns: str = "Unknown"
#     phones: str = "Unknown"
#     phoneInfos: str = "Unknown"
#     emails: str = "Unknown"
#     adressess: str = "Unknown"
#     passwords: str = "Unknown"
#     snUrls: str = "Unknown"
#     icQs: str = "Unknown"
#     skypes: str = "Unknown"
#     telegrams: str = "Unknown"
#     iPs: str = "Unknown"
#     snScreenNames: str = "Unknown"
#     professionTypes: str = "Unknown"
#     professions: str = "Unknown"
#     workAdresses: str = "Unknown"
#     passpCompiles: str = "Unknown"
#     inns: str = "Unknown"
#     omses: str = "Unknown"
#     snilses: str = "Unknown"
#     carNs: str = "Unknown"
#     carVins: str = "Unknown"
#     carModels: str = "Unknown"
#     carComments: str = "Unknown"
#     infoAddInfo: str = "Unknown"
#     infoStatuses: str = "Unknown"
#     infoApps: str = "Unknown"
#     infoUserAgents: str = "Unknown"
#     databaseInfo: str = "Unknown"

class Quick:
    def __init__(self, api_key):
        self.token = api_key
        self.url = "https://quickosintapi.com/api/v1/search/agregate/"

    @staticmethod
    def parse_info(findings: dict, query: str) -> tuple[list, list, list]:
        # info = Info()
        # info.names = ", ".join(findings['names'])
        # info.namesPhoneBooks = ", ".join(findings['namesPhoneBooks'])
        # info.namesDatabaseItems = ", ".join(findings['namesDatabaseItems'])
        # info.borns = ", ".join(findings['borns'])
        # info.phones = ", ".join(findings['phones'])
        # info.phoneInfos = ", ".join(findings['phoneInfos'])
        # info.emails = ", ".join(findings['emails'])
        # info.adressess = ", ".join(findings['adressess'])
        # info.passwords = ", ".join(findings['passwords'])
        # info.snUrls = ", ".join(findings['snUrls'])
        # info.icQs = ", ".join(findings['icQs'])
        # info.skypes = ", ".join(findings['skypes'])
        # info.telegrams = ", ".join(findings['telegrams'])
        # info.iPs = ", ".join(findings['iPs'])
        # info.snScreenNames = ", ".join(findings['snScreenNames'])
        # info.professionTypes = ", ".join(findings['professionTypes'])
        # info.professions = ", ".join(findings['professions'])
        # info.workAdresses = ", ".join(findings['workAdresses'])
        # info.passpCompiles = ", ".join(findings['passpCompiles'])
        # info.inns = ", ".join(findings['inns'])
        # info.omses = ", ".join(findings['omses'])
        # info.snilses = ", ".join(findings['snilses'])
        # info.carNs = ", ".join(findings['carNs'])
        # info.carVins = ", ".join(findings['carVins'])
        # info.carModels = ", ".join(findings['carModels'])
        # info.carComments = ", ".join(findings['carComments'])
        # info.infoAddInfo = ", ".join(findings['infoAddInfo'])
        # info.infoStatuses = ", ".join(findings['infoStatuses'])
        # info.infoApps = ", ".join(findings['infoApps'])
        # info.infoUserAgents = ", ".join(findings['infoUserAgents'])
        # info.databaseInfo = ", ".join(findings['databaseInfo'])
        info = [
            {"name": "üîé –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
             "result": query},
            {"name": "ü§† –í—Å–µ –§–ò–û –æ–±—ä–µ–∫—Ç–∞",
             "result": ", ".join(findings['names'])},
            {"name": "ü•ö –§–ò–û –æ–±—ä–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –±–∞–∑–∞—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∫–Ω–∏–≥",
             "result": ", ".join(findings['namesPhoneBooks'])},
            {"name": "ü•ö –§–ò–û –æ–±—ä–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –æ–±—ã—á–Ω—ã—Ö –±–∞–∑–∞—Ö",
             "result": ", ".join(findings['namesDatabaseItems'])},
            {"name": "üéÇ  –î–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è",
             "result": ", ".join(findings['borns'])},
            {"name": "üìü –ê–±–æ–Ω–µ–Ω—Ç—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞",
             "result": ", ".join(findings['phones'])},
            {"name": "üè¨ –°—Ç—Ä–∞–Ω–∞, —Ä–µ–≥–∏–æ–Ω, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–æ—Ç–æ–≤–æ–π —Å–≤—è–∑–∏",
             "result": ", ".join(findings['phoneInfos'])},
            {"name": "üì© –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã",
             "result": ", ".join(findings['emails'])},
            {"name": "üè† –ê–¥—Ä–µ—Å–∞",
             "result": ", ".join(findings['adressess'])},
            {"name": "üîê –ü–∞—Ä–æ–ª–∏",
             "result": ", ".join(findings['passwords'])},
            {"name": "üìß –°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π",
             "result": ", ".join(findings['snUrls'])},
            {"name": "üòé –ê–¥—Ä–µ—Å–∞ ICQ",
             "result": ", ".join(findings['icQs'])},
            {"name": "üë§ –ê–¥—Ä–µ—Å–∞ Skype",
             "result": ", ".join(findings['skypes'])},
            {"name": "üë§ –ê–∫–∫–∞—É–Ω—Ç—ã –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ –¢–µ–ª–µ–≥—Ä–∞–º",
             "result": ", ".join(findings['telegrams'])},
            {"name": "üñ• IP –∞–¥—Ä–µ—Å–∞",
             "result": ", ".join(findings['iPs'])},
            {"name": "üòé –ù–∏–∫–Ω–µ–π–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∞–π—Ç–∞—Ö –∏ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö",
             "result": ", ".join(findings['snScreenNames'])},
            {"name": "üíµ –¢–∏–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
             "result": ", ".join(findings['professionTypes'])},
            {"name": "üíµ –†–∞–±–æ—Ç–∞/–ø—Ä–æ—Ñ–µ—Å—Å–∏—è",
             "result": ", ".join(findings['professions'])},
            {"name": "üè† –†–∞–±–æ—á–∏–π –∞–¥—Ä–µ—Å",
             "result": ", ".join(findings['workAdresses'])},
            {"name": "üè∑ –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
             "result": ", ".join(findings['passpCompiles'])},
            {"name": "üè∑ –ò–ù–ù",
             "result": ", ".join(findings['inns'])},
            {"name": "üè∑ –û–ú–°",
             "result": ", ".join(findings['omses'])},
            {"name": "üè∑ –°–ù–ò–õ–°",
             "result": ", ".join(findings['snilses'])},
            {"name": "üöò –ì–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
             "result": ", ".join(findings['carNs'])},
            {"name": "üöò VIN –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
             "result": ", ".join(findings['carVins'])},
            {"name": "üöò –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
             "result": ", ".join(findings['carModels'])},
            {"name": "üöò –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é",
             "result": ", ".join(findings['carComments'])},
            {"name": "üè¶ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
             "result": ", ".join(findings['infoStatuses'])},
            {"name": "üíª –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –ø–æ–ª—É—á–∞–ª –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É",
             "result": ", ".join(findings['infoApps'])},
            {"name": "üåê –Æ–∑–µ—Ä –∞–≥–µ–Ω—Ç –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
             "result": ", ".join(findings['infoUserAgents'])},
        ]

        info_user = []
        for el in findings['databaseInfo']:
            info_user.append({"result": el})
        info_add_info = []
        for el in findings['infoAddInfo']:
            info_add_info.append({"result": el})
        return info, info_add_info, info_user

    def make_query(self, link: str) -> dict:
        result = requests.get(link, headers={"Authorization": f"Bearer {self.token}",
                                             "X-ClientId": "myClient-896357090909090"})
        return result.json()

    def get_info(self, info: dict, query) -> tuple[list, list, list] | None:
        if info["items"]:
            info = self.parse_info(info["items"][0], query)
            return info

    def get_request_api(self, link, query):
        request = self.make_query(link)
        if "Error" not in request:
            info = self.get_info(request, query)
            return info

    def find(self, choice, query) -> tuple[list, list, list] | None:
        match choice:
            case "–ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É":
                link = f"{self.url}{query}"

            case "–ø–æ –ø–æ—á—Ç–µ":
                link = f"{self.url}{query}"

            case "–ø–æ –ø–∞—Ä–æ–ª—é":
                link = f"{self.url}pas%20{query}"

            case "–ø–æ –§–ò–û":
                link = f"{self.url}RU%7C{query}"

            case "–ø–æ skype":
                link = f"{self.url}skype%20{query}"

            case "–ø–æ Telegram ID":
                link = f"{self.url}%23id{query}"

            case "–ø–æ Telegram UserName":
                link = f"{self.url}%40{query}"

            case "–ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É":
                link = f"{self.url}pasp%20{query}"

            case "–ø–æ –ò–ù–ù":
                link = f"{self.url}inn%20{query}"

            case "–ø–æ –°–ù–ò–õ–°":
                link = f"{self.url}snils%20{query}"

            case "–ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ":
                link = f"{self.url}{query}"

            case "–ø–æ VIN –∞–≤—Ç–æ":
                link = f"{self.url}{query}"

            case "–ø–æ —Å–æ—Ü—Å–µ—Ç—è–º":
                link = f"{self.url}{query.replace('/', '%2F')}"

            case _:
                link = None

        if link:
            info = self.get_request_api(link, query)
            return info
